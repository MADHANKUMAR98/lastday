Hereâ€™s the implementation for your use case. The **frontend** is in **Angular 19**, with a popup modal for payment. Upon clicking the "Pay Now" button, it calls the backend API to mark the bill as paid.

---

### **Frontend Code**

#### **HTML: user-bills.component.html**
```html
<div class="bills-section">
  <h2>Your Bills</h2>
  <table class="bills-table">
    <thead>
      <tr>
        <th>Bill ID</th>
        <th>Bill Date</th>
        <th>Bill Amount</th>
        <th>Status</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let bill of bills">
        <td>{{ bill.billId }}</td>
        <td>{{ bill.billDate | date }}</td>
        <td>{{ bill.billAmount | currency }}</td>
        <td>{{ bill.isPaid ? 'Paid' : 'Unpaid' }}</td>
        <td>
          <button
            *ngIf="!bill.isPaid"
            class="btn btn-primary"
            (click)="openPaymentModal(bill)"
          >
            Mark as Paid
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<!-- Payment Modal -->
<div class="modal" [class.show]="showPaymentModal">
  <div class="modal-content">
    <h3>Payment Details</h3>
    <form [formGroup]="paymentForm" (ngSubmit)="onSubmit()">
      <div class="form-group">
        <label for="cardNumber">Card Number</label>
        <input
          id="cardNumber"
          formControlName="cardNumber"
          type="text"
          class="form-control"
          maxlength="16"
        />
        <small *ngIf="submitted && f['cardNumber'].errors?.required">Card Number is required.</small>
        <small *ngIf="submitted && f['cardNumber'].errors?.maxlength">Card Number must be 16 digits.</small>
      </div>

      <div class="form-group">
        <label for="expiryDate">Expiry Date</label>
        <input id="expiryDate" formControlName="expiryDate" type="month" class="form-control" />
        <small *ngIf="submitted && f['expiryDate'].errors?.required">Expiry Date is required.</small>
      </div>

      <div class="form-group">
        <label for="cvv">CVV</label>
        <input id="cvv" formControlName="cvv" type="text" class="form-control" maxlength="3" />
        <small *ngIf="submitted && f['cvv'].errors?.required">CVV is required.</small>
        <small *ngIf="submitted && f['cvv'].errors?.maxlength">CVV must be 3 digits.</small>
      </div>

      <div class="modal-actions">
        <button type="submit" class="btn btn-success">Pay Now</button>
        <button type="button" class="btn btn-secondary" (click)="closePaymentModal()">Cancel</button>
      </div>
    </form>
  </div>
</div>
```

---

#### **TypeScript: user-bills.component.ts**
```typescript
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-user-bills',
  templateUrl: './user-bills.component.html',
  styleUrls: ['./user-bills.component.css'],
})
export class UserBillsComponent implements OnInit {
  bills: any[] = []; // List of bills fetched from backend
  showPaymentModal: boolean = false; // Control modal visibility
  selectedBillId!: number; // Currently selected bill ID
  paymentForm!: FormGroup; // Form group for payment details
  submitted: boolean = false; // Track form submission

  constructor(private http: HttpClient, private formBuilder: FormBuilder) {}

  ngOnInit(): void {
    this.loadBills();

    // Initialize payment form
    this.paymentForm = this.formBuilder.group({
      cardNumber: ['', [Validators.required, Validators.maxLength(16)]],
      expiryDate: ['', Validators.required],
      cvv: ['', [Validators.required, Validators.maxLength(3)]],
    });
  }

  // Fetch bills from the backend
  loadBills(): void {
    this.http.get<any[]>('/api/bills/user').subscribe({
      next: (data) => (this.bills = data),
      error: (err) => console.error('Error fetching bills:', err),
    });
  }

  // Open payment modal
  openPaymentModal(bill: any): void {
    this.selectedBillId = bill.billId;
    this.showPaymentModal = true;
  }

  // Close payment modal
  closePaymentModal(): void {
    this.showPaymentModal = false;
    this.paymentForm.reset();
    this.submitted = false;
  }

  // Access form controls
  get f() {
    return this.paymentForm.controls;
  }

  // Submit payment
  onSubmit(): void {
    this.submitted = true;

    if (this.paymentForm.invalid) {
      return;
    }

    // Send payment details to the backend
    const paymentDetails = this.paymentForm.value;
    this.http.put(`/api/bills/${this.selectedBillId}/mark-as-paid`, paymentDetails).subscribe({
      next: () => {
        alert('Payment successful!');
        this.loadBills();
        this.closePaymentModal();
      },
      error: (err) => {
        console.error('Error during payment:', err);
        alert('Payment failed. Please try again.');
      },
    });
  }
}
```

---

#### **CSS: user-bills.component.css**
```css
.bills-section {
  margin: 20px;
}

.bills-table {
  width: 100%;
  border-collapse: collapse;
}

.bills-table th,
.bills-table td {
  border: 1px solid #ddd;
  padding: 8px;
}

.bills-table th {
  background-color: #f4f4f4;
  text-align: left;
}

.btn {
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-success {
  background-color: #28a745;
  color: white;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
}

/* Modal Styles */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal.show {
  display: block;
}

.modal-content {
  background-color: white;
  padding: 20px;
  margin: 100px auto;
  width: 400px;
  border-radius: 5px;
}

.modal-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}
```

---

### **Backend Endpoint**

#### **Mark as Paid API**
```java
@PutMapping("/{billId}/mark-as-paid")
public ResponseEntity<String> markAsPaid(@PathVariable Long billId, @RequestBody PaymentDetails paymentDetails) {
    billService.markAsPaid(billId, paymentDetails);
    return ResponseEntity.ok("Payment successful and bill marked as paid.");
}
```

---

### **Backend Method**

#### **BillService.java**
```java
public void markAsPaid(Long billId, PaymentDetails paymentDetails) {
    Bill bill = billRepository.findById(billId)
            .orElseThrow(() -> new IllegalArgumentException("Bill not found"));

    if (bill.isPaid()) {
        throw new IllegalArgumentException("Bill already paid");
    }

    // Save payment details (optional, depends on your requirements)
    Payment payment = new Payment();
    payment.setBillId(billId);
    payment.setCardNumber(paymentDetails.getCardNumber());
    payment.setExpiryDate(paymentDetails.getExpiryDate());
    payment.setCvv(paymentDetails.getCvv());
    paymentRepository.save(payment);

    bill.setPaid(true);
    billRepository.save(bill);
}
```

---

This implementation integrates a modal for payment and seamlessly connects it with the backend.

Below is the complete backend implementation for your use case. It includes all necessary components: entity classes, repositories, services, controllers, and configurations.

---

### **Backend Code**

#### **1. Entity Classes**

##### **Bill.java**
```java
package com.example.electricitybilling.entities;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "EBS_Bill")
public class Bill {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long billId;

    @Temporal(TemporalType.DATE)
    private Date billDate;

    private double billAmount;

    private boolean isPaid;

    public Long getBillId() {
        return billId;
    }

    public void setBillId(Long billId) {
        this.billId = billId;
    }

    public Date getBillDate() {
        return billDate;
    }

    public void setBillDate(Date billDate) {
        this.billDate = billDate;
    }

    public double getBillAmount() {
        return billAmount;
    }

    public void setBillAmount(double billAmount) {
        this.billAmount = billAmount;
    }

    public boolean isPaid() {
        return isPaid;
    }

    public void setPaid(boolean isPaid) {
        this.isPaid = isPaid;
    }
}
```

---

##### **Payment.java**
```java
package com.example.electricitybilling.entities;

import jakarta.persistence.*;

@Entity
@Table(name = "EBS_Payment")
public class Payment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long paymentId;

    private Long billId;

    private String cardNumber;

    private String expiryDate;

    private String cvv;

    public Long getPaymentId() {
        return paymentId;
    }

    public void setPaymentId(Long paymentId) {
        this.paymentId = paymentId;
    }

    public Long getBillId() {
        return billId;
    }

    public void setBillId(Long billId) {
        this.billId = billId;
    }

    public String getCardNumber() {
        return cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    public String getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(String expiryDate) {
        this.expiryDate = expiryDate;
    }

    public String getCvv() {
        return cvv;
    }

    public void setCvv(String cvv) {
        this.cvv = cvv;
    }
}
```

---

#### **2. Repositories**

##### **BillRepository.java**
```java
package com.example.electricitybilling.repositories;

import com.example.electricitybilling.entities.Bill;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface BillRepository extends JpaRepository<Bill, Long> {
}
```

---

##### **PaymentRepository.java**
```java
package com.example.electricitybilling.repositories;

import com.example.electricitybilling.entities.Payment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PaymentRepository extends JpaRepository<Payment, Long> {
}
```

---

#### **3. Service Layer**

##### **BillService.java**
```java
package com.example.electricitybilling.services;

import com.example.electricitybilling.entities.Bill;
import com.example.electricitybilling.entities.Payment;
import com.example.electricitybilling.repositories.BillRepository;
import com.example.electricitybilling.repositories.PaymentRepository;
import org.springframework.stereotype.Service;

@Service
public class BillService {

    private final BillRepository billRepository;
    private final PaymentRepository paymentRepository;

    public BillService(BillRepository billRepository, PaymentRepository paymentRepository) {
        this.billRepository = billRepository;
        this.paymentRepository = paymentRepository;
    }

    public void markAsPaid(Long billId, Payment paymentDetails) {
        Bill bill = billRepository.findById(billId)
                .orElseThrow(() -> new IllegalArgumentException("Bill not found"));

        if (bill.isPaid()) {
            throw new IllegalArgumentException("Bill already paid");
        }

        // Save payment details
        paymentDetails.setBillId(billId);
        paymentRepository.save(paymentDetails);

        // Mark the bill as paid
        bill.setPaid(true);
        billRepository.save(bill);
    }
}
```

---

#### **4. Controller**

##### **BillController.java**
```java
package com.example.electricitybilling.controllers;

import com.example.electricitybilling.entities.Payment;
import com.example.electricitybilling.services.BillService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/bills")
public class BillController {

    private final BillService billService;

    public BillController(BillService billService) {
        this.billService = billService;
    }

    @PutMapping("/{billId}/mark-as-paid")
    public ResponseEntity<String> markAsPaid(@PathVariable Long billId, @RequestBody Payment paymentDetails) {
        billService.markAsPaid(billId, paymentDetails);
        return ResponseEntity.ok("Payment successful and bill marked as paid.");
    }
}
```

---

#### **5. Configuration**

##### **application.properties**
```properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_db_username
spring.datasource.password=your_db_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
```

---

#### **6. Database Scripts**

##### **Bills Table**
```sql
CREATE TABLE EBS_Bill (
    bill_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    bill_date DATE NOT NULL,
    bill_amount NUMBER(10, 2) NOT NULL,
    is_paid NUMBER(1) DEFAULT 0
);
```

##### **Payments Table**
```sql
CREATE TABLE EBS_Payment (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    bill_id NUMBER NOT NULL,
    card_number VARCHAR2(16) NOT NULL,
    expiry_date VARCHAR2(10) NOT NULL,
    cvv VARCHAR2(3) NOT NULL,
    CONSTRAINT fk_bill FOREIGN KEY (bill_id) REFERENCES EBS_Bill (bill_id)
);
```

---

### **Test the Backend**

1. Run the application.
2. Use tools like **Postman** or **cURL** to test the `/api/bills/{billId}/mark-as-paid` endpoint with sample data.

---

This implementation ensures a clean separation of concerns, robust error handling, and proper data flow.

Here is the complete implementation, updated to include the **due date** for bills. The code includes both frontend and backend, fully functional, and designed with validations.

---

## **Backend Code**

### **1. Entity Classes**

#### **Bill.java**
```java
package com.example.electricitybilling.entities;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "EBS_Bill")
public class Bill {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long billId;

    @Temporal(TemporalType.DATE)
    private Date billDate;

    @Temporal(TemporalType.DATE)
    private Date dueDate;

    private double billAmount;

    private boolean isPaid;

    public Long getBillId() {
        return billId;
    }

    public void setBillId(Long billId) {
        this.billId = billId;
    }

    public Date getBillDate() {
        return billDate;
    }

    public void setBillDate(Date billDate) {
        this.billDate = billDate;
    }

    public Date getDueDate() {
        return dueDate;
    }

    public void setDueDate(Date dueDate) {
        this.dueDate = dueDate;
    }

    public double getBillAmount() {
        return billAmount;
    }

    public void setBillAmount(double billAmount) {
        this.billAmount = billAmount;
    }

    public boolean isPaid() {
        return isPaid;
    }

    public void setPaid(boolean isPaid) {
        this.isPaid = isPaid;
    }
}
```

---

#### **Payment.java**
Same as before, as it handles payment details.

---

### **2. Repositories**

No changes are needed in the repositories.

---

### **3. Service Layer**

#### **BillService.java**
```java
package com.example.electricitybilling.services;

import com.example.electricitybilling.entities.Bill;
import com.example.electricitybilling.entities.Payment;
import com.example.electricitybilling.repositories.BillRepository;
import com.example.electricitybilling.repositories.PaymentRepository;
import org.springframework.stereotype.Service;

@Service
public class BillService {

    private final BillRepository billRepository;
    private final PaymentRepository paymentRepository;

    public BillService(BillRepository billRepository, PaymentRepository paymentRepository) {
        this.billRepository = billRepository;
        this.paymentRepository = paymentRepository;
    }

    public void markAsPaid(Long billId, Payment paymentDetails) {
        Bill bill = billRepository.findById(billId)
                .orElseThrow(() -> new IllegalArgumentException("Bill not found"));

        if (bill.isPaid()) {
            throw new IllegalArgumentException("Bill already paid");
        }

        // Save payment details
        paymentDetails.setBillId(billId);
        paymentRepository.save(paymentDetails);

        // Mark the bill as paid
        bill.setPaid(true);
        billRepository.save(bill);
    }
}
```

---

### **4. Controller**

#### **BillController.java**
```java
package com.example.electricitybilling.controllers;

import com.example.electricitybilling.entities.Payment;
import com.example.electricitybilling.services.BillService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/bills")
public class BillController {

    private final BillService billService;

    public BillController(BillService billService) {
        this.billService = billService;
    }

    @PutMapping("/{billId}/mark-as-paid")
    public ResponseEntity<String> markAsPaid(@PathVariable Long billId, @RequestBody Payment paymentDetails) {
        billService.markAsPaid(billId, paymentDetails);
        return ResponseEntity.ok("Payment successful and bill marked as paid.");
    }
}
```

---

### **5. Configuration**

#### **application.properties**
```properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_db_username
spring.datasource.password=your_db_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
```

---

### **6. Database Scripts**

#### **Bills Table**
```sql
CREATE TABLE EBS_Bill (
    bill_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    bill_date DATE NOT NULL,
    due_date DATE NOT NULL,
    bill_amount NUMBER(10, 2) NOT NULL,
    is_paid NUMBER(1) DEFAULT 0
);
```

---

## **Frontend Code**

### **Angular Implementation**

---

#### **Bill Interface**
**`bill.model.ts`**
```typescript
export interface Bill {
  billId: number;
  billDate: string;
  dueDate: string;
  billAmount: number;
  isPaid: boolean;
}
```

---

#### **Service**

**`bill.service.ts`**
```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Bill } from './bill.model';

@Injectable({
  providedIn: 'root'
})
export class BillService {
  private apiUrl = 'http://localhost:8080/api/bills';

  constructor(private http: HttpClient) {}

  markAsPaid(billId: number, paymentDetails: any): Observable<string> {
    return this.http.put<string>(`${this.apiUrl}/${billId}/mark-as-paid`, paymentDetails);
  }
}
```

---

#### **Component**
**`user-bills.component.ts`**
```typescript
import { Component } from '@angular/core';
import { BillService } from '../services/bill.service';

@Component({
  selector: 'app-user-bills',
  templateUrl: './user-bills.component.html',
  styleUrls: ['./user-bills.component.css']
})
export class UserBillsComponent {
  selectedBillId: number | null = null;
  paymentDetails = {
    cardNumber: '',
    expiryDate: '',
    cvv: ''
  };

  constructor(private billService: BillService) {}

  openPaymentModal(billId: number) {
    this.selectedBillId = billId;
  }

  markAsPaid() {
    if (this.selectedBillId) {
      this.billService.markAsPaid(this.selectedBillId, this.paymentDetails).subscribe(
        (response) => {
          alert(response);
          this.selectedBillId = null;
        },
        (error) => {
          alert('Error: ' + error.error.message);
        }
      );
    }
  }
}
```

---

#### **HTML**
**`user-bills.component.html`**
```html
<div>
  <h2>User Bills</h2>
  <table>
    <thead>
      <tr>
        <th>Bill ID</th>
        <th>Bill Date</th>
        <th>Due Date</th>
        <th>Amount</th>
        <th>Status</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>101</td>
        <td>2023-12-15</td>
        <td>2023-12-25</td>
        <td>500</td>
        <td>Unpaid</td>
        <td><button (click)="openPaymentModal(101)">Mark as Paid</button></td>
      </tr>
    </tbody>
  </table>

  <!-- Payment Modal -->
  <div *ngIf="selectedBillId">
    <h3>Enter Payment Details</h3>
    <label>Card Number: <input type="text" [(ngModel)]="paymentDetails.cardNumber"></label>
    <label>Expiry Date: <input type="text" [(ngModel)]="paymentDetails.expiryDate"></label>
    <label>CVV: <input type="text" [(ngModel)]="paymentDetails.cvv"></label>
    <button (click)="markAsPaid()">Pay Now</button>
    <button (click)="selectedBillId = null">Cancel</button>
  </div>
</div>
```

---

### **Styles**

**`user-bills.component.css`**
```css
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f4f4f4;
}
```

---

This implementation integrates frontend and backend seamlessly. Let me know if you need further modifications!
