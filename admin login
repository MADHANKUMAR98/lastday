Below is the complete code for an **Admin Login** feature in Angular 19 with backend connectivity. It includes functionality for login authentication, navigation to the admin home page, and logout.

---

### **Backend Code**

#### **1. Admin Entity**

**`Admin.java`**
```java
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "EBS_Admin")
public class Admin {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long adminId;
    private String username;
    private String password;

    // Getters and Setters
    public Long getAdminId() {
        return adminId;
    }

    public void setAdminId(Long adminId) {
        this.adminId = adminId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
```

---

#### **2. Admin Repository**

**`AdminRepository.java`**
```java
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface AdminRepository extends JpaRepository<Admin, Long> {
    Admin findByUsernameAndPassword(String username, String password);
}
```

---

#### **3. Admin Service**

**`AdminService.java`**
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AdminService {
    @Autowired
    private AdminRepository adminRepository;

    public boolean authenticateAdmin(String username, String password) {
        return adminRepository.findByUsernameAndPassword(username, password) != null;
    }
}
```

---

#### **4. Admin Controller**

**`AdminController.java`**
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/admin")
public class AdminController {
    @Autowired
    private AdminService adminService;

    @PostMapping("/login")
    public boolean login(@RequestBody Admin admin) {
        return adminService.authenticateAdmin(admin.getUsername(), admin.getPassword());
    }
}
```

---

#### **5. Database Script**

Create the `EBS_Admin` table:
```sql
CREATE TABLE EBS_Admin (
    admin_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL,
    password VARCHAR2(50) NOT NULL
);

-- Insert Sample Admin Data
INSERT INTO EBS_Admin (username, password) VALUES ('admin1', 'password123');
```

---

### **Frontend Code**

#### **1. Admin Model**

**`admin.model.ts`**
```typescript
export interface Admin {
  username: string;
  password: string;
}
```

---

#### **2. Admin Service**

**`admin.service.ts`**
```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AdminService {
  private apiUrl = 'http://localhost:8080/api/admin';

  constructor(private http: HttpClient) {}

  login(admin: { username: string; password: string }): Observable<boolean> {
    return this.http.post<boolean>(`${this.apiUrl}/login`, admin);
  }
}
```

---

#### **3. Admin Login Component**

**`admin-login.component.ts`**
```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AdminService } from '../services/admin.service';

@Component({
  selector: 'app-admin-login',
  templateUrl: './admin-login.component.html',
  styleUrls: ['./admin-login.component.css'],
})
export class AdminLoginComponent {
  admin = { username: '', password: '' };
  errorMessage = '';

  constructor(private adminService: AdminService, private router: Router) {}

  login() {
    this.adminService.login(this.admin).subscribe(
      (isAuthenticated) => {
        if (isAuthenticated) {
          localStorage.setItem('isAdminLoggedIn', 'true');
          this.router.navigate(['/admin-home']);
        } else {
          this.errorMessage = 'Invalid username or password';
        }
      },
      (error) => {
        this.errorMessage = 'Error during login';
      }
    );
  }
}
```

---

#### **4. Admin Login Template**

**`admin-login.component.html`**
```html
<div class="login-container">
  <h2>Admin Login</h2>
  <form (ngSubmit)="login()">
    <div>
      <label>Username</label>
      <input type="text" [(ngModel)]="admin.username" name="username" required />
    </div>
    <div>
      <label>Password</label>
      <input type="password" [(ngModel)]="admin.password" name="password" required />
    </div>
    <div class="error" *ngIf="errorMessage">{{ errorMessage }}</div>
    <button type="submit">Login</button>
  </form>
</div>
```

---

#### **5. Admin Home Component**

**`admin-home.component.ts`**
```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-admin-home',
  templateUrl: './admin-home.component.html',
  styleUrls: ['./admin-home.component.css'],
})
export class AdminHomeComponent {
  constructor(private router: Router) {}

  logout() {
    localStorage.removeItem('isAdminLoggedIn');
    this.router.navigate(['/admin-login']);
  }
}
```

---

**`admin-home.component.html`**
```html
<div class="admin-home-container">
  <h2>Welcome, Admin</h2>
  <button (click)="logout()">Logout</button>
</div>
```

---

#### **6. App Routing**

**`app-routing.module.ts`**
```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AdminLoginComponent } from './components/admin-login/admin-login.component';
import { AdminHomeComponent } from './components/admin-home/admin-home.component';

const routes: Routes = [
  { path: 'admin-login', component: AdminLoginComponent },
  { path: 'admin-home', component: AdminHomeComponent },
  { path: '', redirectTo: '/admin-login', pathMatch: 'full' },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}
```

---

#### **7. Auth Guard (Optional)**

To restrict access to `AdminHome`:

**`auth.guard.ts`**
```typescript
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private router: Router) {}

  canActivate(): boolean {
    if (localStorage.getItem('isAdminLoggedIn') === 'true') {
      return true;
    }
    this.router.navigate(['/admin-login']);
    return false;
  }
}
```

**Add to Routing:**
```typescript
{ path: 'admin-home', component: AdminHomeComponent, canActivate: [AuthGuard] }
```

---

This implementation ensures seamless admin login, validation with the backend, navigation to the home page, and secure logout. Let me know if you need further enhancements!
