Here's a complete **Angular 19 user management application** with robust **form validations**, well-structured code, and professional criteria:

---

### **Folder Structure**
1. **app/user-management**  
   - `user-management.component.ts`  
   - `user-management.component.html`  
   - `user-management.component.css`  

2. **Models**  
   - `user.model.ts`  

3. **Services**  
   - `user.service.ts`

---

### **`user.model.ts`**

```typescript
export interface User {
  id?: number; // Optional for creating new users
  firstName: string;
  lastName: string;
  email: string;
  aadharId: string;
  phoneNumber: string;
  password: string;
}
```

---

### **`user.service.ts`**

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { User } from '../models/user.model';

@Injectable({
  providedIn: 'root',
})
export class UserService {
  private apiBaseUrl = 'https://api.example.com/users'; // Replace with your actual API URL

  constructor(private http: HttpClient) {}

  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(this.apiBaseUrl);
  }

  addUser(user: User): Observable<User> {
    return this.http.post<User>(this.apiBaseUrl, user);
  }

  updateUser(user: User): Observable<User> {
    return this.http.put<User>(`${this.apiBaseUrl}/${user.id}`, user);
  }

  deleteUser(userId: number): Observable<void> {
    return this.http.delete<void>(`${this.apiBaseUrl}/${userId}`);
  }
}
```

---

### **`user-management.component.ts`**

```typescript
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { UserService } from '../services/user.service';
import { User } from '../models/user.model';

@Component({
  selector: 'app-user-management',
  templateUrl: './user-management.component.html',
  styleUrls: ['./user-management.component.css'],
})
export class UserManagementComponent implements OnInit {
  userForm: FormGroup;
  users: User[] = [];
  isEditMode = false;

  constructor(private fb: FormBuilder, private userService: UserService) {
    this.userForm = this.fb.group({
      id: [null], // Hidden field for edit mode
      firstName: ['', [Validators.required, Validators.minLength(3)]],
      lastName: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      aadharId: [
        '',
        [Validators.required, Validators.pattern('^[0-9]{12}$')],
      ],
      phoneNumber: [
        '',
        [Validators.required, Validators.pattern('^[0-9]{10}$')],
      ],
      password: [
        '',
        [Validators.required, Validators.minLength(8)],
      ],
    });
  }

  ngOnInit(): void {
    this.loadUsers();
  }

  loadUsers(): void {
    this.userService.getUsers().subscribe({
      next: (data) => (this.users = data),
      error: (err) => console.error('Error fetching users:', err),
    });
  }

  saveUser(): void {
    if (this.userForm.invalid) {
      alert('Please fix validation errors!');
      return;
    }

    const user: User = this.userForm.value;

    if (this.isEditMode) {
      this.userService.updateUser(user).subscribe(() => {
        alert('User updated successfully!');
        this.loadUsers();
        this.resetForm();
      });
    } else {
      this.userService.addUser(user).subscribe(() => {
        alert('User added successfully!');
        this.loadUsers();
        this.resetForm();
      });
    }
  }

  editUser(user: User): void {
    this.isEditMode = true;
    this.userForm.patchValue(user);
  }

  deleteUser(userId: number): void {
    if (confirm('Are you sure you want to delete this user?')) {
      this.userService.deleteUser(userId).subscribe(() => {
        alert('User deleted successfully!');
        this.loadUsers();
      });
    }
  }

  resetForm(): void {
    this.userForm.reset();
    this.isEditMode = false;
  }

  // Accessor for validation
  get formControls() {
    return this.userForm.controls;
  }
}
```

---

### **`user-management.component.html`**

```html
<div class="container mt-5">
  <h2>User Management</h2>
  <form [formGroup]="userForm" (ngSubmit)="saveUser()">
    <input type="hidden" formControlName="id" />

    <div class="form-group">
      <label for="firstName">First Name:</label>
      <input
        type="text"
        id="firstName"
        class="form-control"
        formControlName="firstName"
      />
      <small class="text-danger"
        *ngIf="formControls.firstName.touched && formControls.firstName.invalid">
        First name must be at least 3 characters long.
      </small>
    </div>

    <div class="form-group">
      <label for="lastName">Last Name:</label>
      <input
        type="text"
        id="lastName"
        class="form-control"
        formControlName="lastName"
      />
      <small class="text-danger"
        *ngIf="formControls.lastName.touched && formControls.lastName.invalid">
        Last name must be at least 3 characters long.
      </small>
    </div>

    <div class="form-group">
      <label for="email">Email:</label>
      <input
        type="email"
        id="email"
        class="form-control"
        formControlName="email"
      />
      <small class="text-danger"
        *ngIf="formControls.email.touched && formControls.email.invalid">
        Please enter a valid email address.
      </small>
    </div>

    <div class="form-group">
      <label for="aadharId">Aadhar ID:</label>
      <input
        type="text"
        id="aadharId"
        class="form-control"
        formControlName="aadharId"
      />
      <small class="text-danger"
        *ngIf="formControls.aadharId.touched && formControls.aadharId.invalid">
        Aadhar ID must be 12 numeric characters.
      </small>
    </div>

    <div class="form-group">
      <label for="phoneNumber">Phone Number:</label>
      <input
        type="text"
        id="phoneNumber"
        class="form-control"
        formControlName="phoneNumber"
      />
      <small class="text-danger"
        *ngIf="formControls.phoneNumber.touched && formControls.phoneNumber.invalid">
        Phone number must be 10 numeric characters.
      </small>
    </div>

    <div class="form-group">
      <label for="password">Password:</label>
      <input
        type="password"
        id="password"
        class="form-control"
        formControlName="password"
      />
      <small class="text-danger"
        *ngIf="formControls.password.touched && formControls.password.invalid">
        Password must be at least 8 characters long.
      </small>
    </div>

    <button type="submit" class="btn btn-primary mt-3">
      {{ isEditMode ? 'Update' : 'Add' }} User
    </button>
    <button
      type="button"
      class="btn btn-secondary mt-3"
      (click)="resetForm()"
    >
      Reset
    </button>
  </form>

  <table class="table mt-5">
    <thead>
      <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th>Aadhar ID</th>
        <th>Phone</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let user of users">
        <td>{{ user.firstName }}</td>
        <td>{{ user.lastName }}</td>
        <td>{{ user.email }}</td>
        <td>{{ user.aadharId }}</td>
        <td>{{ user.phoneNumber }}</td>
        <td>
          <button class="btn btn-warning" (click)="editUser(user)">
            Edit
          </button>
          <button class="btn btn-danger" (click)="deleteUser(user.id!)">
            Delete
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
```

---

### **Key Features**
1. **Form Validations**:
   - Min length, regex for `Aadhar ID` and `Phone Number`.
   - Validation error messages for better user feedback.
2. **Services**:
   - Centralized API handling.
3. **Two Modes**: `Add` and `Edit`.
4. **Professional UI**: Bootstrap used for styling.

Let me know if you need further assistance!
