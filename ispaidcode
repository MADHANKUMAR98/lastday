Hereâ€™s a professional implementation of the frontend component with improved styling, user experience, and proper validations. We'll use Angular Material for UI components and add form validation for a seamless experience.

---

### **Frontend Code (Professional Styling with Validations)**

#### **1. Angular Material Setup**

Install Angular Material in your Angular project if not already installed:

```bash
ng add @angular/material
```

---

#### **2. Bill Payment Component**

**`bill-payment.component.ts`**
```typescript
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { BillService } from '../services/bill.service';

@Component({
  selector: 'app-bill-payment',
  templateUrl: './bill-payment.component.html',
  styleUrls: ['./bill-payment.component.css'],
})
export class BillPaymentComponent {
  billForm: FormGroup;
  message: string = '';
  isLoading: boolean = false;

  constructor(private fb: FormBuilder, private billService: BillService) {
    this.billForm = this.fb.group({
      billId: ['', [Validators.required, Validators.pattern('^[0-9]*$')]],
    });
  }

  get f() {
    return this.billForm.controls;
  }

  payBill() {
    if (this.billForm.valid) {
      this.isLoading = true;
      const billId = this.billForm.value.billId;

      this.billService.markAsPaid(billId).subscribe({
        next: (response) => {
          this.message = `Bill with ID ${billId} marked as paid successfully!`;
          this.isLoading = false;
          this.billForm.reset();
        },
        error: (err) => {
          this.message = `Error: Unable to mark the bill as paid.`;
          this.isLoading = false;
        },
      });
    }
  }
}
```

---

#### **3. HTML Template**

**`bill-payment.component.html`**
```html
<div class="bill-payment-container mat-elevation-z8">
  <h2 class="title">Pay Bill</h2>

  <form [formGroup]="billForm" (ngSubmit)="payBill()" class="bill-form">
    <mat-form-field appearance="outline" class="form-field">
      <mat-label>Bill ID</mat-label>
      <input
        matInput
        type="text"
        formControlName="billId"
        placeholder="Enter Bill ID"
      />
      <mat-error *ngIf="f['billId'].hasError('required')">
        Bill ID is required
      </mat-error>
      <mat-error *ngIf="f['billId'].hasError('pattern')">
        Bill ID must be a valid number
      </mat-error>
    </mat-form-field>

    <button
      mat-raised-button
      color="primary"
      type="submit"
      [disabled]="billForm.invalid || isLoading"
    >
      {{ isLoading ? 'Processing...' : 'Pay Now' }}
    </button>
  </form>

  <mat-card *ngIf="message" class="message-card">
    {{ message }}
  </mat-card>
</div>
```

---

#### **4. Styling**

**`bill-payment.component.css`**
```css
.bill-payment-container {
  max-width: 500px;
  margin: 50px auto;
  padding: 20px;
  border-radius: 8px;
  background-color: #ffffff;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.title {
  text-align: center;
  margin-bottom: 20px;
  font-size: 24px;
  font-weight: bold;
  color: #333;
}

.bill-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.form-field {
  width: 100%;
}

.mat-raised-button {
  width: 100%;
  padding: 10px 0;
  font-size: 16px;
}

.message-card {
  margin-top: 20px;
  padding: 10px;
  background-color: #f1f8e9;
  color: #2e7d32;
  font-weight: bold;
  border-left: 4px solid #2e7d32;
  border-radius: 4px;
}
```

---

#### **5. Angular Material Module**

Create a shared Material module for all Angular Material components.

**`material.module.ts`**
```typescript
import { NgModule } from '@angular/core';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatCardModule } from '@angular/material/card';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';

@NgModule({
  exports: [
    MatInputModule,
    MatButtonModule,
    MatFormFieldModule,
    MatCardModule,
    MatProgressSpinnerModule,
  ],
})
export class MaterialModule {}
```

---

#### **6. Bill Service**

The bill service remains the same as provided earlier:

**`bill.service.ts`**
```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class BillService {
  private apiUrl = 'http://localhost:8080/api/bills';

  constructor(private http: HttpClient) {}

  markAsPaid(billId: number): Observable<any> {
    return this.http.put(`${this.apiUrl}/${billId}/pay`, null);
  }
}
```

---

### **Backend Code (No Changes)**

The backend code remains the same as provided earlier, with the `Billent` entity, service, repository, and controller managing the payment functionality. Refer to the previous backend code snippets.

---

### **Key Features**

1. **Angular Material Styling**: 
   - Professional design with form fields, buttons, and feedback cards.
   - Material elevation (`mat-elevation-z8`) adds shadows for a modern UI.

2. **Validation**:
   - Ensures the `Bill ID` is a valid number.
   - Disables the submit button when the form is invalid.

3. **Loading State**:
   - Displays "Processing..." while the payment request is being processed.

4. **Feedback**:
   - Displays success or error messages in a styled feedback card.

This setup ensures a polished user experience with professional styling and robust validations.




Below is the complete backend and frontend code that integrates the `Billent` entity you have created. It includes a feature where an admin can view bills, select a bill by its ID, enter payment details, and mark the bill as paid. This is implemented with Angular 19 for the frontend and Spring Boot for the backend.

---

### **Backend Code**

#### **1. Updated Bill Entity**

**`Billent.java`**
```java
import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "billent")
public class Billent {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "bill_id")
    private Long billid;

    @Column(name = "customer_id", nullable = false)
    private String customerId;

    @Column(name = "bill_date", nullable = false)
    private LocalDate billDate;

    @Column(name = "due_date", nullable = false)
    private LocalDate dueDate;

    @Column(name = "no_of_units", nullable = false)
    private Integer noofunits;

    @Column(name = "bill_amount", nullable = false)
    private Double billAmount;

    @Column(name = "is_paid", nullable = false)
    private boolean isPaid;

    // Getters and Setters
    public Long getBillid() {
        return billid;
    }

    public void setBillid(Long billid) {
        this.billid = billid;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public LocalDate getBillDate() {
        return billDate;
    }

    public void setBillDate(LocalDate billDate) {
        this.billDate = billDate;
    }

    public LocalDate getDueDate() {
        return dueDate;
    }

    public void setDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
    }

    public Integer getNoofunits() {
        return noofunits;
    }

    public void setNoofunits(Integer noofunits) {
        this.noofunits = noofunits;
    }

    public Double getBillAmount() {
        return billAmount;
    }

    public void setBillAmount(Double billAmount) {
        this.billAmount = billAmount;
    }

    public boolean isPaid() {
        return isPaid;
    }

    public void setPaid(boolean isPaid) {
        this.isPaid = isPaid;
    }
}
```

---

#### **2. Repository**

**`BillentRepository.java`**
```java
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface BillentRepository extends JpaRepository<Billent, Long> {}
```

---

#### **3. Service**

**`BillentService.java`**
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class BillentService {

    @Autowired
    private BillentRepository billentRepository;

    public Optional<Billent> getBillById(Long billId) {
        return billentRepository.findById(billId);
    }

    public Billent updateBillPayment(Long billId, boolean isPaid) {
        Optional<Billent> billOptional = billentRepository.findById(billId);
        if (billOptional.isPresent()) {
            Billent bill = billOptional.get();
            bill.setPaid(isPaid);
            return billentRepository.save(bill);
        }
        throw new RuntimeException("Bill not found with ID: " + billId);
    }
}
```

---

#### **4. Controller**

**`BillentController.java`**
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/bills")
@CrossOrigin(origins = "*")
public class BillentController {

    @Autowired
    private BillentService billentService;

    @GetMapping("/{billId}")
    public Optional<Billent> getBillById(@PathVariable Long billId) {
        return billentService.getBillById(billId);
    }

    @PutMapping("/{billId}/pay")
    public Billent markAsPaid(@PathVariable Long billId) {
        return billentService.updateBillPayment(billId, true);
    }
}
```

---

### **Frontend Code (Angular 19)**

#### **1. Service**

**`bill.service.ts`**
```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class BillService {
  private apiUrl = 'http://localhost:8080/api/bills';

  constructor(private http: HttpClient) {}

  getBillById(billId: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/${billId}`);
  }

  markAsPaid(billId: number): Observable<any> {
    return this.http.put(`${this.apiUrl}/${billId}/pay`, null);
  }
}
```

---

#### **2. Component**

**`bill-payment.component.ts`**
```typescript
import { Component } from '@angular/core';
import { BillService } from '../services/bill.service';

@Component({
  selector: 'app-bill-payment',
  templateUrl: './bill-payment.component.html',
  styleUrls: ['./bill-payment.component.css'],
})
export class BillPaymentComponent {
  billId!: number;
  message: string = '';

  constructor(private billService: BillService) {}

  payBill() {
    if (this.billId) {
      this.billService.markAsPaid(this.billId).subscribe({
        next: (response) => {
          this.message = `Bill with ID ${this.billId} marked as paid successfully!`;
        },
        error: (err) => {
          this.message = `Error: Unable to mark the bill as paid.`;
        },
      });
    }
  }
}
```

---

#### **3. HTML**

**`bill-payment.component.html`**
```html
<div class="bill-payment-container">
  <h2>Pay Bill</h2>
  <form (ngSubmit)="payBill()" #billForm="ngForm">
    <div class="form-group">
      <label for="billId">Bill ID:</label>
      <input
        type="number"
        id="billId"
        name="billId"
        class="form-control"
        [(ngModel)]="billId"
        required
      />
    </div>
    <button type="submit" class="btn btn-primary" [disabled]="!billForm.valid">
      Pay Now
    </button>
  </form>
  <p *ngIf="message" class="message">{{ message }}</p>
</div>
```

---

#### **4. Styling**

**`bill-payment.component.css`**
```css
.bill-payment-container {
  max-width: 500px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 5px;
  background-color: #f9f9f9;
}

.form-group {
  margin-bottom: 15px;
}

.btn-primary {
  background-color: #007bff;
  border-color: #007bff;
}

.message {
  margin-top: 10px;
  color: green;
  font-weight: bold;
}
```

---

This code ensures the admin can toggle through the bill IDs, select a bill, and make a payment. Upon successful payment, the `isPaid` status in the database is updated to `true`.
